% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/overNNf.R
\name{overNNf}
\alias{overNNf}
\title{Nearest neighbor spatial join}
\usage{
overNNf(x, y)
}
\arguments{
\item{x}{geometry (locations) of the queries}

\item{y}{layer from which the geometries or attributes are queried}
}
\value{
If \code{y} is only geometry (\code{SpatialPoints}), a vector with the index of \code{y} for each geometry matching x. If \code{y} has attribute data (\code{SpatialPointsDataFrame}), attribute data are returned.
}
\description{
Spatial join between two point layers based on nearest neighbors.
}
\examples{
library(rgeos)
data(states)
data(cities)
ctr = gCentroid(states, byid = TRUE)
usAtlas = "+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"
states = spTransform(states, usAtlas)
cities = spTransform(cities, usAtlas)
# Plot
plot(cities)
plot(states, add = TRUE, border = "grey")
plot(ctr, add = TRUE, col = "red")
# Nearest neighbor spatial join
nn_state_ctr = overNNf(x = cities, y = ctr)
# Draw lines between each city and nearest state centroid
for(i in 1:nrow(cities)) {
plot(
  sp::SpatialLines(
  list(sp::Lines(
  list(sp::Line(rbind(
  sp::coordinates(cities[i,]),
  sp::coordinates(ctr[nn_state_ctr[i],])))),
  ID = "a"
  )),
  proj4string = sp::CRS(sp::proj4string(ctr))
  ), add = TRUE
)
}

}

