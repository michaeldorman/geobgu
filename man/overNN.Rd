% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/overNN.R
\name{overNN}
\alias{overNN}
\title{Nearest neighbor spatial join}
\usage{
overNN(x, y)
}
\arguments{
\item{x}{geometry (locations) of the queries}

\item{y}{layer from which the geometries or attributes are queried}
}
\value{
If \code{y} is only geometry (\code{SpatialPoints}), a vector with the index of \code{y} for each geometry matching x. If \code{y} has attribute data (\code{SpatialPointsDataFrame}), attribute data are returned.
}
\description{
Spatial join between two point layers based on nearest neighbors.
}
\examples{
 library(maps)
 library(maptools)
 library(rgeos)
 # Get data
 cities = us.cities[us.cities$capital == 2, ]
 coordinates(cities) = ~ long + lat
 proj4string(cities) = "+proj=longlat +datum=WGS84"
 usa = map("state", fill = TRUE, plot = FALSE)
 IDs = sapply(strsplit(usa$names, ":"), function(x) x[1])
 usa = map2SpatialPolygons(usa, IDs=IDs, proj4string = CRS("+proj=longlat +datum=WGS84"))
 ctr = gCentroid(usa, byid = TRUE)
 # Plot
 plot(cities)
 plot(usa, add = TRUE, border = "grey")
 plot(ctr, add = TRUE, col = "red")
 # Nearest neighbor spatial join
 nn_state_ctr = overNN(cities, ctr)
 # Draw lines between each city and nearest state centroid
 for(i in 1:nrow(cities)) {
   plot(
     SpatialLines(
       list(Lines(
         list(Line(rbind(coordinates(cities[i,]), coordinates(ctr[nn_state_ctr[i],])))),
         ID = "a"
       )),
       proj4string = CRS(proj4string(ctr))
     ), add = TRUE
   )
 }
}

